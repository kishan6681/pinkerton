/*
    Target database:    USR_DEV
    Target instance:    CBR-LAP-DEL2715\SQLEXPRESS
    Generated date:     2020-05-18T12:56:59Z
    Generated on:       CBR-LAP-DEL2715
    Package version:    (undefined)
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  4.2.20133.20020
    Migrations pending: 1

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
:setvar ReleaseVersion ""
:setvar ForceDeployWithoutBaseline "False"
:setvar DefaultFilePrefix "USR_DEV"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultBackupPath "c:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\Backup\"
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "(undefined)"
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO


GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);








------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Initialize_Deployment.sql" -----';
GO

---------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Initialize_Deployment.sql" ------------------------
/*
Pre-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be prepended to the build script.
 Use SQLCMD syntax to include a file in the pre-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Initialize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;


SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('78b97177-d65c-5b1d-808d-70b72729938e' AS UNIQUEIDENTIFIER) AND [script_checksum] = '2848EC1A6494457D80E99AB526AE8F8B2BC047F535FAA8518C19D97E734CE3C6')
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql", ID: {78b97177-d65c-5b1d-808d-70b72729938e} *****';

GO


------- BEGIN PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql" --------
GO
IF OBJECT_ID('[dbo].[spGetChangeTracking]') IS NOT NULL
	DROP PROCEDURE [dbo].[spGetChangeTracking];

GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
-- Batch submitted through debugger: spGetChangeTracking.sql|8|0|C:\Users\mkomaravolu\Desktop\Local-Pinkerton-DB\Source\SourceCode\Database\Test_local\pinkerton\USR_C\USR_C\Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql

CREATE PROCEDURE [dbo].[spGetChangeTracking]
	AS
BEGIN
DECLARE @LAST_SYNC_VERSION  bigint;
DECLARE @CURRENT_SYNC_VERSION bigint;
SET @LAST_SYNC_VERSION =0
SET @CURRENT_SYNC_VERSION=CHANGE_TRACKING_CURRENT_VERSION()

SELECT @CURRENT_SYNC_VERSION

SELECT CHANGE_TRACKING_CURRENT_VERSION() AS CURRENT_SYNC_VERSION,
CHANGE_TRACKING_MIN_VALID_VERSION (OBJECT_ID('EA.T_USR')) AS MIN_VALID_VERSION

SELECT CT.SYS_CHANGE_OPERATION,
CT.SYS_CHANGE_VERSION,CT.SYS_CHANGE_COLUMNS,CT.SYS_CHANGE_CREATION_VERSION,CT.SYS_CHANGE_CONTEXT
 FROM CHANGETABLE(CHANGES EA.T_USR,@LAST_SYNC_VERSION)
  AS CT ORDER BY SYS_CHANGE_VERSION DESC

select 
CT.SYS_CHANGE_OPERATION,CT.SYS_CHANGE_VERSION,CT.USR_ID,TU.*,
CT.SYS_CHANGE_COLUMNS,CT.SYS_CHANGE_CONTEXT,CT.SYS_CHANGE_CREATION_VERSION,
convert(varchar,CT.SYS_CHANGE_CONTEXT) as CHANGE_CONTEXT,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_USR_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_CODE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_USR_CODE,
 CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REQUEST_OFFICE_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_REQUEST_OFFICE_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'CLIENT_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_CLIENT_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'SERVICE_DESCRIPTION', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_SERVICE_DESCRIPTION,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_START_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_USR_START_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_END_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_USR_END_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'OM_LOGIN_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_OM_LOGIN_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REVIEWER_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_REVIEWER_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REVIEWER_START_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_REVIEWER_START_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REVIEWER_END_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_REVIEWER_END_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REVIEWER_COMMENTS', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_REVIEWER_COMMENTS,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'KEYWORDS', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_KEYWORDS,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_STATUS_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CHANGE_USR_STATUS_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'IS_DELETED', 'ColumnId'), SYS_CHANGE_COLUMNS) AS IS_DELETED,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'CREATE_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CREATE_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'UPDATE_LOGIN_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS UPDATE_LOGIN_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'UPDATE_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS UPDATE_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'CREATE_LOGIN_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CREATE_LOGIN_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REQUESTING_DIRECTOR_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS CREATE_LOGIN_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'SERVICE_TYPE_CATEGORY_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS SERVICE_TYPE_CATEGORY_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'ASSET_TYPE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS ASSET_TYPE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'ALERT_START_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS ALERT_START_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'ALERT_END_DATE', 'ColumnId'), SYS_CHANGE_COLUMNS) AS ALERT_END_DATE,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'REQUESTING_DIRECTORY_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS REQUESTING_DIRECTORY_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'OM_LOGIN_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS OM_LOGIN_ID,
CHANGE_TRACKING_IS_COLUMN_IN_MASK(COLUMNPROPERTY(OBJECT_ID('USR_DEV.EA.T_USR'),
'USR_ATTACHMENTS_ID', 'ColumnId'), SYS_CHANGE_COLUMNS) AS USR_ATTACHMENTS_ID
from CHANGETABLE (CHANGES EA.T_USR,@LAST_SYNC_VERSION) ct
left outer join EA.T_USR TU on TU.USR_ID= CT.USR_ID
ORDER BY SYS_CHANGE_VERSION DESC

BEGIN TRAN
    DECLARE @CONTEXT VARBINARY(100)
	SET @CONTEXT = CONVERT( VARBINARY,'ServerChange-' + CONVERT(VARCHAR,GETUTCDATE(),112));	
	WITH CHANGE_TRACKING_CONTEXT( @CONTEXT)
	UPDATE EA.T_USR SET UPDATE_LOGIN_ID=UPDATE_LOGIN_ID;
COMMIT TRAN 
END 


GO
-------- END PROGRAMMABLE OBJECT MIGRATION: "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql" ---------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('78b97177-d65c-5b1d-808d-70b72729938e' AS UNIQUEIDENTIFIER), '2848EC1A6494457D80E99AB526AE8F8B2BC047F535FAA8518C19D97E734CE3C6', 'Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Programmable Objects\dbo\Stored Procedures\spGetChangeTracking.sql", ID: {78b97177-d65c-5b1d-808d-70b72729938e} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
PRINT '1 migration(s) deployed successfully';

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
